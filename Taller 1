#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <iomanip>
#include <algorithm>

using namespace std;

struct Aula {
    vector<float> estaturas;
};

Aula leerDatosDesdeArchivo(const string& rutaArchivo) {
    ifstream archivo(rutaArchivo);
    Aula aula;
    string linea;
    float valor;

    if (archivo.fail()) {
        cout << "No se pudo abrir el archivo" << endl;
        exit(1);
    }

    while (getline(archivo, linea)) {
        istringstream ss(linea);
        ss >> valor;
        aula.estaturas.push_back(valor);
    }
    return aula;
}

void ordenarDatos(vector<float>& datos) {
    sort(datos.begin(), datos.end());
}

float calcularRango(const vector<float>& datos) {
    return datos.back() - datos.front();
}

int calcularNumIntervalos(int tamano) {
    return ceil(1 + 3.3 * log10(tamano));
}

float calcularAnchoIntervalo(float rango, int numIntervalos) {
    return rango / numIntervalos;
}

void mostrarTablaFrecuencias(const vector<float>& datos, int numIntervalos, float anchoIntervalo) {
    cout << setw(15) << "Intervalo" << setw(10) << "ni" << setw(10) << "Ni" << setw(10) << "fi" << setw(10) << "Fi" << endl;

    int n = datos.size();
    int Ni = 0;
    float Fi = 0.0;

    float lower = datos.front();
    float upper = lower + anchoIntervalo;

    for (int i = 0; i < numIntervalos; ++i) {
        int ni = count_if(datos.begin(), datos.end(), [lower, upper](float x) { return x >= lower && x < upper; });
        Ni += ni;
        float fi = (float)ni / n;
        Fi += fi;

        cout << setw(7) << lower << " - " << setw(7) << upper << setw(10) << ni << setw(10) << Ni << setw(10) << fi << setw(10) << Fi << endl;

        lower = upper;
        upper += anchoIntervalo;
    }
}

int main() {
    string rutaArchivo = "estaturas.csv";

    // Leer y ordenar los datos
    Aula aula1 = leerDatosDesdeArchivo(rutaArchivo);
    Aula aula2 = leerDatosDesdeArchivo(rutaArchivo);  // Suponiendo que ambos aulas tienen los mismos datos para simplificar
    ordenarDatos(aula1.estaturas);
    ordenarDatos(aula2.estaturas);

    // Calcular el rango
    float rangoAula1 = calcularRango(aula1.estaturas);
    float rangoAula2 = calcularRango(aula2.estaturas);

    // Calcular el nÃºmero de intervalos
    int numIntervalosAula1 = calcularNumIntervalos(aula1.estaturas.size());
    int numIntervalosAula2 = calcularNumIntervalos(aula2.estaturas.size());

    // Calcular el ancho del intervalo
    float anchoIntervaloAula1 = calcularAnchoIntervalo(rangoAula1, numIntervalosAula1);
    float anchoIntervaloAula2 = calcularAnchoIntervalo(rangoAula2, numIntervalosAula2);

    // Mostrar la tabla de frecuencias
    cout << "Tabla de frecuencias para el Aula 1:" << endl;
    mostrarTablaFrecuencias(aula1.estaturas, numIntervalosAula1, anchoIntervaloAula1);

    cout << "\nTabla de frecuencias para el Aula 2:" << endl;
    mostrarTablaFrecuencias(aula2.estaturas, numIntervalosAula2, anchoIntervaloAula2);

    return 0;
}
